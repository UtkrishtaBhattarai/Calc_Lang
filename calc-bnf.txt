< Program >                 ::= < Program > < Statement >
                               | < Statement >
                
< Statement >               ::= < Statement-Body > "\n"

< Statement-Body >          ::= < Expression >
                              | < Assignment >
                              | < IO-Operation >
                              | < Record-Decl >
                              | < Branch >
                              | < Loop >
                              | < Function-Def >
                              | < Class-Decl-List >
                              | < Class-Inst>
                              | ""

< Class-Decl-List > 		::= < Class-Decl-List > < Class-Decl >
                               | < Class-Decl >

< Class-Decl > 		        ::= “class” < Id > < Inheritance > “\n” "attribute" <Assignment-List > "\n" <Function-List> “end” “class”

< Inheritance > 		    ::= “inherits” < Id >
  				               | “”

< Class-Inst >             ::= Object of < Id > <Ref> = "new" < Id > "(" < Arg-List > ")"

< Assignment >              ::= < Ref > "=" < Expression >
                               | < Ref > "=" < Record-Inst >
                               | < Ref > "=" < Class-Inst >

< Record-Inst >             ::= "new" < Id >

< IO-Operation >            ::= "display" < Expression >
                              | "input" < Ref >

< Record-Decl >             ::= "record" < Id > "\n" < Field-List > "end" "record"

< Field-List >              ::= < Field-List > < Field >
                              | < Field >

< Field >        ::= "field" < Id > "\n"

< Branch >       ::= "if" < Condition > "\n" < Program > "end" "if"

< Loop >         ::= "while" < Condition > "\n" < Program > "end" "while"

<Function-List>  ::= <Function-List> <Function-def> "\n"
                    | <Function-def> "\n"

< Function-Def > ::= "fun" < Id > "(" < Param-List > ")" "\n" < Program > "end" "fun"

< Param-List >   ::= < NV-Param-List >
                     | ""

< NV-Param-List > ::= < NV-Param-List > "," < Id >
                      | < Id >

< Condition >    ::= < Expression > "=" < Expression >
                     | < Expression > "<>" < Expression >
                     | < Expression > "<"  < Expression >
                     | < Expression > ">"  < Expression >
                     | < Expression > "<="  < Expression >
                     | < Expression > ">="  < Expression >

< Expression >   ::= < Expression > "+" < Term >
                     | < Expression > "-" < Term >
                     | < Term >
                   
< Term >         ::= < Term > "*" < Factor >
                     | < Term > "/" < Factor >
                     | < Term > "MOD" < Factor >
                     | < Factor >

< Factor >       ::= < Base > "^" < Factor >
                     | < Base >

< Base >         ::= "(" < Expression > ")"
                     | "-" < Expression >
                     | < Number >

< Number >       ::= < Integer-Lit >
                     | < Real-Lit >
                     | < Ref >
                     | < Function-Call >

< Integer-Lit >  ::= < Integer-Lit > < Digit >
                     | < Digit >

< Real-Lit >     ::= < Integer-Lit > "." < Integer-Lit >

< Id >           ::= < Letter > < Id' >
                     | "_" < Id' >

< Id' >          ::= < Letter > < Id' >
                     | "_" < Id' >
                     | < Digit > < Id' >
                     | ""

< Ref >          ::= < Id > 
                     | < Ref > "." < Id >

< Function-Call > ::= < Ref > "(" < Arg-List > ")"

< Arg-List >      ::= < NV-Arg-List > 
                      | ""

< NV-Arg-List >   ::= < NV-Arg-List > "," < Expression > 
                      | < Expression >

< Digit >        ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"

< Letter >       ::= Any upper case or lower case letter.

Comments
========
# to the end of the line